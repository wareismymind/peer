name: Continuous deployment

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    uses: wareismymind/peer/.github/workflows/build-and-test.yml@main

  calculate-version:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.version_tag.outputs.version_tag }}
      should_release: ${{ steps.release.outputs.release_created }}
    steps:
      - name: Setup Release Please
        uses: GoogleCloudPlatform/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          package-name: peer

      - name: Create Version Tag
        if: ${{ steps.release.outputs.release_created }}
        id: version_tag
        env:
          VERSION_TAG: "${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}"
        run: echo "::set-output name=version_tag::${VERSION_TAG}"

  publish-binaries:
    runs-on: ubuntu-latest
    needs: [calculate-version]
    strategy:
      matrix:
        os: [win-x64, linux-x64, osx-x64]
    if: ${{ needs.calculate-version.outputs.should_release }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          include-prerelease: true

      - name: publish binaries
        run: >
          dotnet publish 
          -o ./output
          -r "${{ matrix.os }}"
          -c Release
          --self-contained
          /p:Version=${{ needs.calculate-version.outputs.version_tag }}
          /p:AssemblyVersion=${{ needs.calculate-version.outputs.version_tag }}

  publish-nuget:
    runs-on: ubuntu-latest
    needs: [calculate-version]
      steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          include-prerelease: true

      - name: publish tool package
        run: >
          dotnet pack 
          -o ./output
          -c Tool
          /p:Version=${{ needs.calculate-version.outputs.version_tag }}
          /p:AssemblyVersion=${{ needs.calculate-version.outputs.version_tag }}
          /p:PackageVersion=${{ needs.calculate-version.outputs.version_tag }}
          
      - name: publish nuget tool package
        run: >
          dotnet nuget push "./output/peer.${{ needs.calculate-version.outputs.version_tag }}.nupkg"
          -s https://api.nuget.org/v3/index.json
          --api-key ${{ secrets.NUGET_TOKEN }}
